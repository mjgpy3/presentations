# Intro to Functional Programming Using JavaScript
Michael Gilliland | 2016
---

# Format

![Contrived Problem -> "Familiar" Solution -> FP Concept -> OOP Relevance](static/images/FP_Talk_Format.png)

(N Problems)
---

# Contrived problem 1: Multiples of 3 and 5

> If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
>
> Find the sum of all the multiples of 3 or 5 below 1000.

<br /><br /><br /><br />

From [Project Euler, problem 1](https://projecteuler.net/problem=1)

---

# Familiar solution

```javascript
var result = 0;

for (var i = 1; i < 1000; i += 1) {

  if (i % 5 === 0 || i % 3 === 0) {
    result += i;
  }

}

console.log(result); // => 233168
```

---

# FP: Data transformation (pipelines) over state

```javascript
var range = require('lodash').range;

var result =
  range(0, 1000)
  .filter(function (value) {
    return value % 3 === 0 || value % 5 === 0;
  })
  .reduce(function (sum, value) {
    return sum + value;
  });

console.log(result); // => 233168
```
---

# FP: Currying and high-order functions

```javascript
var lodash = require('lodash'),
  range = lodash.range,
  add = lodash.add;

var result =
  range(0, 1000)
  .filter(either(divisibleBy(3), divisibleBy(5)))
  .reduce(add);

function divisibleBy(divisor) {
  return function (quot) {
    return quot % divisor === 0;
  };
}

function either(f, g) {
  return function (x) {
    return f(x) || g(x);
  };
}

console.log(result); // => 233168
```
---

# OOP relevance

## Pipeline chaining
 - `map`, `filter`, `reduce`, `scan` and relatives are (almost) everywhere now

## Currying
 - Looks like the "builder" pattern and/or fluent setters

## High-order functions
 - Also (almost) everywhere.
   - If you don't have them, small interfaces can do the trick

---

# Contrived problem 2: House repairs

> Implement a data structure which tracks how much you've spent
> repairing rooms in your house

Expected APIs
 - `trackRepair(expenseTracker, roomName, amount)`
 - `totalRepairCostIn(expenseTracker, roomName)`

---

# Familiar solution

```javascript
var tracker = {};

function trackRepair(expenseTracker, roomName, amount) {
  expenseTracker[roomName] =
    (expenseTracker[roomName] || 0) + amount;
}

function totalRepairCostIn(expenseTracker, roomName) {
  return expenseTracker[roomName] || 0;
}

trackRepair(tracker, 'man-cave', 1000);
trackRepair(tracker, 'man-cave', 50);
trackRepair(tracker, 'living-room', 20);

console.log(totalRepairCostIn(tracker, 'man-cave')); // => 1050
console.log(totalRepairCostIn(tracker, 'living-room')); // => 20
console.log(totalRepairCostIn(tracker, 'bathroom')); // => 0
```

---

# Immutability (persistence) and recursion

```javascript
var tracker = null;

function trackRepair(ledger, roomName, amount) {
  return {
    roomName: roomName,
    amount: amount,
    previousEntry: ledger
  };
}

function totalRepairCostIn(ledger, roomName) {
  if (ledger === null) {
    return 0;
  }

  var amount = ledger.roomName === roomName ? ledger.amount : 0;

  return amount + totalRepairCostIn(ledger.previousEntry, roomName);
}

var t1 = trackRepair(tracker, 'man-cave', 1000);
var t2 = trackRepair(t1, 'man-cave', 50);
var t3 = trackRepair(t2, 'living-room', 20);

console.log(totalRepairCostIn(t3, 'man-cave')); // => 1050
console.log(totalRepairCostIn(t3, 'living-room')); // => 20
console.log(totalRepairCostIn(t3, 'bathroom')); // => 0
```

---

# OOP relevance

## Immutability
 - Requires rigor and discipline
 - There are some libraries that can provide it

## Recursion
 - OOP generally has a poor recursion story

---

# Contrived problem 3: Ancestry tree

> Model an ancestry tree where each person has a name and, perhaps, parents

Expected APIs
 - ``
 - ``

---

# Familiar solution

Father
```javascript
var dad = {
  name: 'Roger',
  father: null,
  mother: null
};
```

Son
```javascript
var jim = {
  name: 'Jimmy',
  father: dad,
  mother: null
};
```
