# Property-Based Testing in JavaScript Using JSVerify
Michael Gilliland (@mjgpy3) <br />
[github.com/mjgpy3/presentations](https://github.com/mjgpy3/presentations)
---

# Agenda
 - What is Property-Based Testing?
 - Enter JSVerify
 - Examples
 - When to use it?
 - When to not use it?

---
# What is Property-Based Testing?

<img src="http://cdn.theleanleap.com/wp-content/uploads/2015/02/blind-men-elephant-600x440.gif">
</img>

---
# Let's start with a different question

### What is "normal" testing?

---
# "Normal" testing is sniper-rifle testing

<img src="http://listamaze.com/wp-content/uploads/2015/06/M21.jpeg?8fa78d">
</img>

---
# Our testing is deliberate
<img style="width: 60%" src="http://www.mccambridge.org/blog/wp-content/uploads/2010/03/IMG_2488.jpg">
</img>

---
# Sometimes we flat-out miss
<img style="width: 90%" src="http://2.bp.blogspot.com/-vcufGRGQvtk/UPTH-ynAkAI/AAAAAAAAMHc/ur9kh5KnBVI/s1600/Pulp+Fiction+(1994)+720p%5B17-17-24%5D.jpg">
</img>

---
# Property-based testing is shot-gun testing
<img src="http://i.telegraph.co.uk/multimedia/archive/02442/shotgun_2442821b.jpg">
</img>

---
# Our testing is _still_ deliberate
<img width="90%" src="https://upload.wikimedia.org/wikipedia/commons/b/b5/Shotgun_in_training_US_military.jpg">
</img>

---
# Our coverage can be greater
<img width="60%" src="http://www.b2bmarketingconsultants.com/wp-content/uploads/2013/09/target.jpg">
</img>

---
# But we can still miss!
<img style="width: 90%" src="http://2.bp.blogspot.com/-vcufGRGQvtk/UPTH-ynAkAI/AAAAAAAAMHc/ur9kh5KnBVI/s1600/Pulp+Fiction+(1994)+720p%5B17-17-24%5D.jpg">
</img>

---
# Enough with analogies, what is PBT?
<img style="width: 90%" src="http://www.mahoneylandscaping.com/images/portfolio/big/Landscaping_March_2012_033.jpg">
</img>

---
# Instead of

## Given (arrange)
> some state/setup

## When (act)
> some action

## Then (assert)
> some singular expectation

---
# ...we have...

## Given (arrange)
> some state/setup

## When (act)
> some action

## Then (assert)
> **some higher-level property**

---
# ...or even just

## When (act)
> some action

## Then (assert)
> **some higher-level property**

---
# How do we express properties?
<img src="https://next3-assets.s3.amazonaws.com/activities/175/backgrounds-1423861398-Proportion_Activity_03.gif">
</img>

---
# Predicate functions

```javascript
function examplePred(a, b, c, etc) {
  return Boolean;
}
```

---
# Examples

```javascript
function isEven(n) {
  return n % 2 === 0;
}
```

---
# Examples

```javascript
function isEven(n) {
  return n % 2 === 0;
}

console.log(isEven(42));
// true
```

---
# Examples

```javascript
function isEven(n) {
  return n % 2 === 0;
}

console.log(isEven(42));
// true

console.log(isEven(35));
// false
```

---
# Examples

```javascript
function is21OrOlder(person) {
  return person.age >= 21;
}
```

---
# Examples

```javascript
function is21OrOlder(person) {
  return person.age >= 21;
}

var littleStevie = {
  age: 7
};
```

---
# Examples

```javascript
function is21OrOlder(person) {
  return person.age >= 21;
}

var littleStevie = {
  age: 7
};

console.log(is21OrOlder(littleStevie));
// false
```

---
# Examples

```javascript
function is21OrOlder(person) {
  return person.age >= 21;
}

var littleStevie = {
  age: 7
};

console.log(is21OrOlder(littleStevie));
// false

var marshall = {
  age: 43
};
```

---
# Examples

```javascript
function is21OrOlder(person) {
  return person.age >= 21;
}

var littleStevie = {
  age: 7
};

console.log(is21OrOlder(littleStevie));
// false

var marshall = {
  age: 43
};

console.log(is21OrOlder(marshall));
// true
```

---
# Enter JSVerify
<img style="width: 50%;" src="examples/node_modules/jsverify/jsverify-300.png">
</img>

---
# General info

### Created by
Oleg Grenrus (@phadej)

### Influenced by
QuickCheck

### Available in
TODO: Fillin

---
# Primary feature: generators

## Many built in generators for common types
 - bool, string, integer, nat, etc...

---
# Primary feature: generators

## Many built in generators for common types
 - bool, string, integer, nat, etc...
 - also combinations (oneof, objects, array, json)

---
# Primary feature: generators

## Many built in generators for common types
 - bool, string, integer, nat, etc...
 - also combinations (oneof, objects, array, json)

## Even generators for functions
 - integer -> integer

---
# Primary feature: generators

## Many built in generators for common types
 - bool, string, integer, nat, etc...
 - also combinations (oneof, objects, array, json)

## Even generators for functions
 - integer -> integer

## Mechanism for adding custom generators

---
# This talk may be misnamed...
<img style="width: 90%;" src="http://i2.kym-cdn.com/photos/images/original/000/692/118/2db.jpg"></img>

---
# PBT is mostly the same across tools
<img style="width: 100%;" src="http://www.thequotepedia.com/images/09/always-remember-youre-unique-just-like-everyone-else-ego-quote.jpg"></img>

---
# 2 Examples
<img style="width: 70%;" src="https://upload.wikimedia.org/wikipedia/commons/8/84/Lego-all-combinations-of-two_bricks.jpg"></img>

---
# Example 1: Absolute value

```javascript
function abs(n) {
  if (n < 0) {
    return -n;
  }

  return n;
}
```

---
# How we _might_ unit test it

```javascript
  assertThat(abs(42) === 42)
```

```javascript
  assertThat(abs(-35) === 35)
```

```javascript
  assertThat(abs(0) === 0)
```

---
# Or better

```javascript
[
  0, 1, 24, 42, 99, 100
].forEach(function (n) {

  assertThat(abs(n) === n)

});

[
  -12, -72, -92, -89, -100
].forEach(function (n) {

  assertThat(abs(n) === -n)

});
```

---
# Let's translate those to PBT

```javascript
var jsc = require('jsverify');

jsc.assert(
  jsc.forall('nat', function (n) {
    return abs(n) === n;
  })
);

jsc.assert(
  jsc.forall('nat', function (n) {
    return abs(-n) === n;
  })
);
```

---
# More general properties: _always positive_

```javascript
var abs_is_always_positive =

  jsc.forall('number', function (n) {
    return abs(n) >= 0;
  });

jsc.assert(abs_is_always_positive);
```

---
# More general properties: _idempotent_

```javascript
var abs_is_idempotent =

  jsc.forall('number', function (n) {
    return abs(abs(n)) === abs(n);
  });

jsc.assert(abs_is_idempotent)
```

---
# Example 2: Callback fun

```javascript
function ifPersonLike(value, personlikeCallback, otherwiseCallback) {
  if (value.name && value.age && value.age >= 0 && value.address) {
    return personlikeCallback(value);
  }

  return otherwiseCallback(value);
}
```

---
# Happy-path test

```javascript
var ifpersonlike_invokes_the_first_callback_given_a_person =

  jsc.forall('', function (n) {
    return abs(abs(n)) === abs(n);
  });

jsc.assert(
  abs_is_idempotent
);
```
